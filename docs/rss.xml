<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Mizuki's Blog</title>
        <link>https://minoki.github.io</link>
        <description><![CDATA[Posts about functional programming languages]]></description>
        <atom:link href="https://minoki.github.io/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Mon, 06 Jan 2025 00:00:00 UT</lastBuildDate>
        <item>
    <title>How to use GHC's LLVM backend</title>
    <link>https://minoki.github.io/posts/2025-01-06-ghc-llvm-backend.html</link>
    <description><![CDATA[<p>Japanese version: <a href="https://zenn.dev/mod_poppo/articles/ghc-llvm-backend">GHCのLLVMバックエンドの使い方</a> <em>This article was translated from Japanese with help of AI. Of course, the translation was checked and corrected by the human.</em></p>
<hr />
<p>GHC is a compiler capable of generating native code.
It provides three methods for generating native code: its own NCG (Native Code Generator) backend, the LLVM backend, and the via-C backend that generates code via C sources.</p>
<p>Typically, the NCG backend is used to generate code for x86 or AArch64, but there may be situations where you want to use the LLVM backend.
This article explains how to enable and use the LLVM backend in GHC.</p>
<!-- GHC introduced the LLVM backend in version 7.0, released in 2010. -->
<p>Here are the features of the LLVM backend compared to the NCG backend:</p>
<ul>
<li>Supports more architectures: As of this writing, ARM, AArch64, LoongArch, RISC-V, System Z, x86, and x86-64. (Some of these are also supported by NCG, but others are only supported via the LLVM backend.)</li>
<li>Supports SIMD primitives (Though NCG supports some SIMD primitives for x86-64 starting from GHC 9.12, it is still in development.)</li>
<li>Leverages optimizations implemented in LLVM.</li>
</ul>
<p>For certain targets, using the LLVM backend is mandatory.
For example:</p>
<ul>
<li>To generate code for AArch64 with GHC &lt;= 9.0, you need the LLVM backend.</li>
<li>Similarly, generating RISC-V code with GHC &lt;= 9.10 requires the LLVM backend.</li>
</ul>
<p>Note: The sections “Installing LLVM” and “Configuring GHC to Use LLVM” do not apply to Windows. For Windows-specific instructions, see the “For Windows” section below.</p>
<h2 id="installing-llvm">Installing LLVM</h2>
<p>For non-Windows systems, LLVM is not bundled with GHC and must be installed separately using your system’s package manager.</p>
<p>The version of LLVM you need depends on the GHC version.
The following table summarizes the compatibility:</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">GHC</th>
<th style="text-align: left;">LLVM</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">GHC 8.10.7</td>
<td style="text-align: left;">LLVM &gt;= 9 &amp;&amp; &lt;= 12</td>
</tr>
<tr>
<td style="text-align: left;">GHC 9.0.2</td>
<td style="text-align: left;">LLVM &gt;= 9 &amp;&amp; &lt;= 12</td>
</tr>
<tr>
<td style="text-align: left;">GHC 9.2.8</td>
<td style="text-align: left;">LLVM &gt;= 9 &amp;&amp; &lt;= 12</td>
</tr>
<tr>
<td style="text-align: left;">GHC 9.4.8</td>
<td style="text-align: left;">LLVM &gt;= 10 &amp;&amp; &lt;= 13 (if you are using <code>-mavx</code>, you need LLVM &lt;= 12)</td>
</tr>
<tr>
<td style="text-align: left;">GHC 9.6</td>
<td style="text-align: left;">LLVM &gt;= 11 &amp;&amp; &lt;= 15 (if you are using <code>-mavx</code>, you need LLVM &lt;= 12)</td>
</tr>
<tr>
<td style="text-align: left;">GHC 9.8</td>
<td style="text-align: left;">LLVM &gt;= 11 &amp;&amp; &lt;= 15 (if you are using <code>-mavx</code>, you need LLVM &lt;= 12)</td>
</tr>
<tr>
<td style="text-align: left;">GHC 9.10</td>
<td style="text-align: left;">LLVM &gt;= 13 &amp;&amp; &lt;= 15</td>
</tr>
<tr>
<td style="text-align: left;">GHC 9.12</td>
<td style="text-align: left;">LLVM &gt;= 13 &amp;&amp; &lt;= 19</td>
</tr>
</tbody>
</table>
<p>Note: Use LLVM 12 for GHC &lt;= 9.8 if you plan to use the <code>-mavx</code> option (<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/23870">GHC #23870</a>).</p>
<p>Here, I describe the procedures to install LLVM 15.</p>
<p>For Ubuntu or similar systems using <code>apt</code>:</p>
<pre><code>$ sudo apt install llvm-15 clang-15</code></pre>
<p>For macOS using Homebrew:</p>
<pre><code>$ brew install llvm@15</code></pre>
<p>For macOS using MacPorts:</p>
<pre><code>$ sudo port install llvm-15 clang-15</code></pre>
<p>Among the libraries and commands provided by LLVM, the ones required by GHC are these:</p>
<ul>
<li>The <code>opt</code> command: The optimizer for LLVM IR.</li>
<li>The <code>llc</code> command: The tool to generate assembly output from LLVM IR.</li>
<li>The <code>clang</code> command: GHC 9.10+ uses it as an assembler.</li>
</ul>
<p>Let’s see where these commands are located.</p>
<p>On Ubuntu, commands have the suffix <code>-15</code>:</p>
<pre><code>$ which opt-15 llc-15 clang-15
/usr/bin/opt-15
/usr/bin/llc-15
/usr/bin/clang-15</code></pre>
<p>Alternatively, <code>/usr/lib/llvm-15/bin</code> contains the commands without suffix:</p>
<pre><code>$ ls /usr/lib/llvm-15/bin/{opt,llc,clang}
/usr/lib/llvm-15/bin/clang
/usr/lib/llvm-15/bin/llc
/usr/lib/llvm-15/bin/opt</code></pre>
<p>On macOS with Homebrew, the commands are in <code>$(brew --prefix llvm@15)/bin</code>:</p>
<pre><code>$ ls $(brew --prefix llvm@15)/bin/{opt,llc,clang}
/opt/homebrew/opt/llvm@15/bin/clang
/opt/homebrew/opt/llvm@15/bin/llc
/opt/homebrew/opt/llvm@15/bin/opt</code></pre>
<p>On macOS with MacPorts, commands have the suffix <code>-mp-15</code>:</p>
<pre><code>$ which opt-mp-15 llc-mp-15 clang-mp-15
/opt/local/bin/opt-mp-15
/opt/local/bin/llc-mp-15
/opt/local/bin/clang-mp-15</code></pre>
<p>Alternatively, <code>/opt/local/libexec/llvm-15/bin</code> contains the commands without suffix:</p>
<pre><code>$ ls /opt/local/libexec/llvm-15/bin/{opt,llc,clang}
/opt/local/libexec/llvm-15/bin/clang
/opt/local/libexec/llvm-15/bin/llc
/opt/local/libexec/llvm-15/bin/opt</code></pre>
<p>Adding the directory containing the suffix-less commands to your PATH makes it easier for GHC to locate them, which is convenient.
However, since different versions of GHC may require different versions of LLVM, I do not recommend adding the suffix-less commands to your PATH if you need to manage multiple GHC/LLVM versions simultaneously.</p>
<h2 id="configuring-ghc-to-use-llvm">Configuring GHC to Use LLVM</h2>
<p>GHC needs to know the location of the LLVM tools (<code>opt</code>, <code>llc</code>, and <code>clang</code>).
There are two ways to configure this:</p>
<ul>
<li>Specify the paths each time you compile.</li>
<li>Set the paths when installing GHC.</li>
</ul>
<h3 id="specify-paths-at-compile-time">Specify Paths at Compile Time</h3>
<p>Use the <code>-pgmlo</code>, <code>-pgmlc</code>, and <code>-pgmlas</code> flags to specify the locations of <code>opt</code>, <code>llc</code>, and <code>clang</code>, respectively.
For example, if you want to use GHC 9.12.1 with LLVM 15 installed by Homebrew, you type:</p>
<pre><code>$ ghc-9.12.1 -fllvm -pgmlo $(brew --prefix llvm@15)/bin/opt \
    -pgmlc $(brew --prefix llvm@15)/bin/llc \
    -pgmlas $(brew --prefix llvm@15)/bin/clang Main.hs</code></pre>
<h3 id="configure-paths-during-ghc-installation">Configure Paths During GHC Installation</h3>
<p>If you specify the location of LLVM tools during GHC installation, you won’t need to specify options like <code>-pgmlo</code> each time.</p>
<p>First, if the LLVM tools are in a directory included in your PATH, and the command names follow one of the formats below:</p>
<pre><code>opt-15 opt-15.0 opt15 opt
llc-15 llc-15.0 llc15 llc
clang-15 clang-15.0 clang15 clang</code></pre>
<p>GHC’s <code>configure</code> command will automatically detect and record the LLVM toolchain names during installation.</p>
<p>If LLVM wasn’t installed at the time of GHC installation, you will need to reinstall or reconfigure GHC after installing LLVM.
For example. using GHCup, you can run:</p>
<pre><code>$ ghcup install ghc 9.12.1 --force</code></pre>
<p>With Stack, you can use:</p>
<pre><code>$ stack setup 9.12.1 --reinstall</code></pre>
<p>If the LLVM tools are not in the PATH or their names are non-standard (e.g. when using Homebrew or MacPorts), you need to manually specify the locations of <code>opt</code>, <code>llc</code>, and <code>clang</code> when running GHC’s <code>configure</code> command.
This is done by setting the <code>OPT</code>, <code>LLC</code>, and <code>LLVMAS</code> environment variables.</p>
<p>For GHCup, the process looks like this:</p>
<pre><code>$ # Using Homebrew
$ env OPT=$(brew --prefix llvm@15)/bin/opt \
      LLC=$(brew --prefix llvm@15)/bin/llc \
      LLVMAS=$(brew --prefix llvm@15)/bin/clang \
      ghcup install ghc 9.12.1 --force

$ # Using MacPorts
$ env OPT=opt-mp-15 LLC=llc-mp-15 LLVMAS=clang-mp-15 \
      ghcup install ghc 9.12.1 --force</code></pre>
<p>If you installed GHC using Stack, follow these steps:</p>
<pre><code>$ # Using Homebrew
$ env OPT=$(brew --prefix llvm@15)/bin/opt \
      LLC=$(brew --prefix llvm@15)/bin/llc \
      LLVMAS=$(brew --prefix llvm@15)/bin/clang \
      stack setup 9.12.1 --reinstall

$ # Using MacPorts
$ env OPT=opt-mp-15 LLC=llc-mp-15 LLVMAS=clang-mp-15 \
      stack setup 9.12.1 --reinstall</code></pre>
<p>To install GHC directly from a tarball:</p>
<pre><code>$ curl -LO https://downloads.haskell.org/~ghc/9.12.1/ghc-9.12.1-aarch64-apple-darwin.tar.xz
$ tar xf ghc-9.12.1-aarch64-apple-darwin.tar.xz
$ cd ghc-9.12.1-aarch64-apple-darwin

$ # Using Homebrew
$ env OPT=$(brew --prefix llvm@15)/bin/opt \
      LLC=$(brew --prefix llvm@15)/bin/llc \
      LLVMAS=$(brew --prefix llvm@15)/bin/clang \
      ./configure --prefix=/opt/ghc-9.12.1

$ # Using MacPorts
$ env OPT=opt-mp-15 LLC=llc-mp-15 LLVMAS=clang-mp-15 \
      ./configure --prefix=/opt/ghc-9.12.1

$ sudo make install</code></pre>
<p>The names of the detected or manually specified LLVM commands (<code>opt</code>, <code>llc</code>, <code>clang</code>) are recorded in the <code>lib/settings</code> file.
You can check the content like this:</p>
<pre><code>$ # For GHCup
$ grep LLVM ~/.ghcup/ghc/9.12.1/lib/ghc-9.12.1/lib/settings
,(&quot;LLVM target&quot;, &quot;arm64-apple-darwin&quot;)
,(&quot;LLVM llc command&quot;, &quot;/opt/homebrew/opt/llvm@15/bin/llc&quot;)
,(&quot;LLVM opt command&quot;, &quot;/opt/homebrew/opt/llvm@15/bin/opt&quot;)
,(&quot;LLVM llvm-as command&quot;, &quot;/opt/homebrew/opt/llvm@15/bin/clang&quot;)

$ # For Stack
$ grep LLVM ~/.stack/programs/aarch64-osx/ghc-9.12.1/lib/ghc-9.12.1/lib/settings
,(&quot;LLVM target&quot;, &quot;arm64-apple-darwin&quot;)
,(&quot;LLVM llc command&quot;, &quot;/opt/homebrew/opt/llvm@15/bin/llc&quot;)
,(&quot;LLVM opt command&quot;, &quot;/opt/homebrew/opt/llvm@15/bin/opt&quot;)
,(&quot;LLVM llvm-as command&quot;, &quot;/opt/homebrew/opt/llvm@15/bin/clang&quot;)</code></pre>
<p>Note:
If you temporarily add <code>PATH=$(brew --prefix llvm@15)/bin:$PATH</code> to include the LLVM commands during setup, only the command names (e.g. <code>opt</code>) are recorded in the <code>lib/settings</code> file instead of the full paths.
For this reason, it is better to use environment variables like <code>OPT</code> when specifying the locations of the commands.</p>
<h2 id="for-windows">For Windows</h2>
<p>On Windows, GHC includes LLVM starting from version 9.4.
With GHC 9.12 and later, the LLVM bundled with GHC is automatically used.</p>
<p>However, for GHC versions &lt;= 9.10, attempting to use the LLVM backend with floating-point numbers can lead to linker errors, making it effectively unusable.
For more details, refer to <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/22487">GHC #22487</a>.</p>
<h2 id="using-the-llvm-backend">Using the LLVM Backend</h2>
<p>If the setup is successful, you can use the LLVM backend by passing the <code>-fllvm</code> option to GHC:</p>
<pre><code>$ ghc -fllvm hello.hs</code></pre>
<p>Of course, if you chose to the “specify paths at compile time” method, you’ll also need to provide options such as <code>-pgmlo</code> each time.</p>
<h2 id="using-the-llvm-backend-in-github-actions">Using the LLVM Backend in GitHub Actions</h2>
<p>There may be scenarios where you want to enable the LLVM backend in GitHub Actions.
With the knowledge gained so far, configuring the LLVM backend in GitHub Actions should not be difficult.
For a practical example, see <a href="https://github.com/minoki/ghc-llvm-backend-test/blob/main/.github/workflows/build.yaml">ghc-llvm-backend-test/.github/workflows/build.yaml</a>.</p>
<p>One point to note is that the runner image might already include a version of GHC.
In such cases, you need to pass the <code>--force</code> option to GHCup.
Since the current <code>haskell-actions/setup</code> does not support passing the <code>--force</code> option, you can either install GHCup directly or use the <a href="https://github.com/marketplace/actions/ghcup-setup">haskell/ghcup-setup</a> action.</p>
<h2 id="known-issues-with-the-llvm-backend">Known Issues with the LLVM Backend</h2>
<p>Here are some known issues related to the LLVM backend, including ones already mentioned:</p>
<ul>
<li><p>GHC &lt;= 9.8 &amp;&amp; LLVM &gt;= 13: <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/23870">#23870: LLVM 13+ doesn’t recognize <code>-stack-alignment</code> option · Issues · Glasgow Haskell Compiler / GHC · GitLab</a> This issue arises when the <code>-mavx</code> option is specified.</p></li>
<li><p>GHC &lt;= 9.10 on Windows: <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/22487">#22487: Link error when using LLVM backend on Windows: undefined symbol: <code>_fltused</code> · Issues · Glasgow Haskell Compiler / GHC · GitLab</a> This occurs whe floating-point numbers are used.</p></li>
<li><p>GHC 9.10.1 on macOS: <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/24999">#24999: LLVM version detection logic in configure doesn’t work on macOS · Issues · Glasgow Haskell Compiler / GHC · GitLab</a></p></li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Start using GHC’s LLVM backend to take full advantage of its optimizations and architecture support.
Happy coding!</p>]]></description>
    <pubDate>Mon, 06 Jan 2025 00:00:00 UT</pubDate>
    <guid>https://minoki.github.io/posts/2025-01-06-ghc-llvm-backend.html</guid>
    <dc:creator>Arata Mizuki</dc:creator>
</item>
<item>
    <title>Playing with Visible Forall in GHC 9.10</title>
    <link>https://minoki.github.io/posts/2024-05-11-playing-with-visible-forall.html</link>
    <description><![CDATA[<p><em>Japanese version</em>: <a href="https://zenn.dev/mod_poppo/articles/playing-with-visible-forall">GHC 9.10で実装された可視なforallで遊ぶ</a></p>
<p>Today, GHC 9.10.1 is released.
One of the new features is “visible forall”, or <code>RequiredTypeArguments</code> extension.
In this article, I will play with this new feature.</p>
<p>The official documents of this feature are these:</p>
<ul>
<li><a href="https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0281-visible-forall.rst">ghc-proposals/proposals/0281-visible-forall.rst at master · ghc-proposals/ghc-proposals</a></li>
<li><a href="https://downloads.haskell.org/ghc/9.10.1/docs/users_guide/exts/required_type_arguments.html">6.4.18. Required type arguments — Glasgow Haskell Compiler 9.10.1 User’s Guide</a></li>
</ul>
<h2 id="basics-the-identity-function">Basics: The identity function</h2>
<p>The simplest example would be the variant of <code>id</code> function that takes the type explicitly.
The ordinary <code>id</code> function and the variant of <code>id</code> function with visible <code>forall</code> can each be written as follows:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE RequiredTypeArguments #-}</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="co">-- From User&#39;s Guide:</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- The ordinary id function</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="fu">id</span><span class="ot"> ::</span> <span class="kw">forall</span> a<span class="op">.</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="fu">id</span> x <span class="ot">=</span> x</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="co">-- The id function with visible forall</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="ot">id_vdq ::</span> <span class="kw">forall</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>id_vdq a x <span class="ot">=</span> x</span></code></pre></div>
<p>Let’s try them with GHCi:</p>
<pre><code>ghci&gt; :set +t
ghci&gt; id 42  -- Let GHC infer the type
42
it :: Num a =&gt; a
ghci&gt; id @Int 42  -- Supply the type explicitly
42
it :: Int
ghci&gt; id_vdq _ 42  -- Let GHC infer the type
42
it :: Num w =&gt; w
ghci&gt; id_vdq Int 42  -- Supply the type explicitly (note that there&#39;s no `@`!)
42
it :: Int</code></pre>
<p>So, by declaraing a function with <code>forall -&gt;</code>, you can pass the type without using <code>@</code>.</p>
<p>Note that if the same notation is used for a term and a type, the term interpretation takes precedence.
Let’s pass the <code>[Int]</code> type:</p>
<pre><code>ghci&gt; id_vdq [Int] [42]
&lt;interactive&gt;:37:8: error: [GHC-83865]
    • Expected a type, but ‘[Int]’ has kind ‘[*]’
    • In the type ‘[Int]’
      In the expression: id_vdq [Int] [42]
      In an equation for ‘it’: it = id_vdq [Int] [42]</code></pre>
<p>An error occurs because <code>[Int]</code> is interpreted as “a type-level list with <code>Int</code> as an element” instead of “the type of a list consisting of <code>Int</code>”.
There are two ways around this problem.</p>
<p>The first is to use a <code>type</code> expression, which will be available with the <code>ExplicitNamespaces</code> extension.</p>
<pre><code>ghci&gt; :set -XExplicitNamespaces 
ghci&gt; id_vdq (type [Int]) [42]
[42]
it :: [Int]</code></pre>
<p>The other is to stop using the same notation for terms and types.
For list and tuple types, the <code>Prelude.Experimental</code> module provides aliases such as <code>List</code> and <code>Tuple2</code>.</p>
<pre><code>ghci&gt; :m + Prelude.Experimental
ghci&gt; id_vdq (List Int) [42]
[42]
it :: [Int]</code></pre>
<h2 id="binary-operator">Binary operator</h2>
<p>Binary operators can take a type.
Let’s consider the following function:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE RequiredTypeArguments #-}</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="ot">as ::</span> <span class="kw">forall</span> a<span class="op">.</span> a <span class="ot">-&gt;</span> <span class="kw">forall</span> a&#39; <span class="ot">-&gt;</span> a <span class="op">~</span> a&#39; <span class="ot">=&gt;</span> a&#39;</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>as x _ <span class="ot">=</span> x</span></code></pre></div>
<p>This function serves like a type annotation, when used as an infix operator:</p>
<pre><code>ghci&gt; :set +t
ghci&gt; 42 `as` Integer
42
it :: Integer
ghci&gt; 42 `as` Rational
42 % 1
it :: Rational
ghci&gt; 42 `as` Double
42.0
it :: Double</code></pre>
<p>This is not much to be thankful for, but you can easily create function that specify “part of a type”:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE RequiredTypeArguments #-}</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="ot">as&#39; ::</span> <span class="kw">forall</span> f a<span class="op">.</span> f a <span class="ot">-&gt;</span> <span class="kw">forall</span> a&#39; <span class="ot">-&gt;</span> a <span class="op">~</span> a&#39; <span class="ot">=&gt;</span> f a&#39;</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>as&#39; x _ <span class="ot">=</span> x</span></code></pre></div>
<pre><code>ghci&gt; :m + Data.Functor.Identity
ghci&gt; Identity 42 `as&#39;` Int
Identity 42
it :: Identity Int
ghci&gt; Identity 42 `as&#39;` Rational
Identity (42 % 1)
it :: Identity Rational</code></pre>
<p>Of course, specifying part of a type has been possible with <code>PartialTypeSignatures</code> extension.</p>
<h2 id="type-classes">Type classes</h2>
<p>It would be useful to be able to receive the type in a typeclass method.
For example, it would be simpler to write <code>sizeOf Int</code> instead of <code>sizeOf (undefined :: Int)</code>.
Is such a definition possible?</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Hypothetical code</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">NewStorable</span> a <span class="kw">where</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="ot">  sizeOf ::</span> <span class="kw">forall</span> a <span class="ot">-&gt;</span> <span class="dt">Int</span></span></code></pre></div>
<p>Unfortunately, this will not work.
The <code>a</code> in typeclass and the <code>a</code> in <code>forall</code> are different variables.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Actual interpretation</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">NewStorable</span> a <span class="kw">where</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="ot">  sizeOf ::</span> <span class="kw">forall</span> a&#39; <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- Externally-visible type would be:</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- sizeOf :: forall a. NewStorable a =&gt; forall a&#39; -&gt; Int</span></span></code></pre></div>
<p>The right way is to create a wrapper.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE AllowAmbiguousTypes #-}</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">NewStorable</span> a <span class="kw">where</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="ot">  sizeOf_ ::</span> <span class="dt">Int</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- A wrapper</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a><span class="ot">sizeOf ::</span> <span class="kw">forall</span> a <span class="ot">-&gt;</span> <span class="dt">NewStorable</span> a <span class="ot">=&gt;</span> <span class="dt">Int</span></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>sizeOf a <span class="ot">=</span> sizeOf_ <span class="op">@</span>a</span></code></pre></div>
<p>An alternative way is a trick using <code>~</code>:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">NewStorable</span> a <span class="kw">where</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  sizeOf ::</span> <span class="kw">forall</span> a&#39; <span class="ot">-&gt;</span> a <span class="op">~</span> a&#39; <span class="ot">=&gt;</span> <span class="dt">Int</span></span></code></pre></div>
<p>However, using an extra <code>=&gt;</code> may cause subtle differences in intermediate code.
Consider the following code:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE GHC2021 #-}</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE AllowAmbiguousTypes #-}</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE RequiredTypeArguments #-}</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Debug.Trace</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Proxy</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Tagged</span> t a <span class="ot">=</span> <span class="dt">MkTagged</span> {<span class="ot"> unTagged ::</span> a }</span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Foo</span> a <span class="kw">where</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a><span class="ot">  someValueAmb ::</span> <span class="dt">Int</span></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a><span class="ot">  someValueTagged ::</span> <span class="dt">Tagged</span> a <span class="dt">Int</span></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a><span class="ot">  someValueProxy ::</span> <span class="dt">Proxy</span> a <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a><span class="ot">  someValueVis ::</span> <span class="kw">forall</span> a&#39; <span class="ot">-&gt;</span> a <span class="op">~</span> a&#39; <span class="ot">=&gt;</span> <span class="dt">Int</span></span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Foo</span> <span class="dt">Float</span> <span class="kw">where</span></span>
<span id="cb14-16"><a href="#cb14-16" aria-hidden="true" tabindex="-1"></a>  someValueAmb <span class="ot">=</span> trace <span class="st">&quot;some heavy computation 1&quot;</span> <span class="dv">42</span></span>
<span id="cb14-17"><a href="#cb14-17" aria-hidden="true" tabindex="-1"></a>  someValueTagged <span class="ot">=</span> <span class="dt">MkTagged</span> (trace <span class="st">&quot;some heavy computation 2&quot;</span> <span class="dv">42</span>)</span>
<span id="cb14-18"><a href="#cb14-18" aria-hidden="true" tabindex="-1"></a>  someValueProxy _ <span class="ot">=</span> trace <span class="st">&quot;some heavy computation 3&quot;</span> <span class="dv">42</span></span>
<span id="cb14-19"><a href="#cb14-19" aria-hidden="true" tabindex="-1"></a>  someValueVis _ <span class="ot">=</span> trace <span class="st">&quot;some heavy computation 4&quot;</span> <span class="dv">42</span></span>
<span id="cb14-20"><a href="#cb14-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-21"><a href="#cb14-21" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb14-22"><a href="#cb14-22" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb14-23"><a href="#cb14-23" aria-hidden="true" tabindex="-1"></a>  <span class="fu">print</span> (someValueAmb <span class="op">@</span><span class="dt">Float</span>)</span>
<span id="cb14-24"><a href="#cb14-24" aria-hidden="true" tabindex="-1"></a>  <span class="fu">print</span> (someValueAmb <span class="op">@</span><span class="dt">Float</span>)</span>
<span id="cb14-25"><a href="#cb14-25" aria-hidden="true" tabindex="-1"></a>  <span class="fu">print</span> (unTagged (<span class="ot">someValueTagged ::</span> <span class="dt">Tagged</span> <span class="dt">Float</span> <span class="dt">Int</span>))</span>
<span id="cb14-26"><a href="#cb14-26" aria-hidden="true" tabindex="-1"></a>  <span class="fu">print</span> (unTagged (<span class="ot">someValueTagged ::</span> <span class="dt">Tagged</span> <span class="dt">Float</span> <span class="dt">Int</span>))</span>
<span id="cb14-27"><a href="#cb14-27" aria-hidden="true" tabindex="-1"></a>  <span class="fu">print</span> (someValueProxy (<span class="dt">Proxy</span> <span class="op">@</span><span class="dt">Float</span>))</span>
<span id="cb14-28"><a href="#cb14-28" aria-hidden="true" tabindex="-1"></a>  <span class="fu">print</span> (someValueProxy (<span class="dt">Proxy</span> <span class="op">@</span><span class="dt">Float</span>))</span>
<span id="cb14-29"><a href="#cb14-29" aria-hidden="true" tabindex="-1"></a>  <span class="fu">print</span> (someValueVis <span class="dt">Float</span>)</span>
<span id="cb14-30"><a href="#cb14-30" aria-hidden="true" tabindex="-1"></a>  <span class="fu">print</span> (someValueVis <span class="dt">Float</span>)</span></code></pre></div>
<p>Suppose <code>someValue</code> is a heavy computation.
In this code, I use <code>trace</code> instead of actual computation.</p>
<p>In <code>main</code>, each <code>someValue</code> is called twice.
How many times will the right side of <code>someValue</code> be evaluated?</p>
<p>If optimizations are enabled, each <code>someValue</code> is evaluated once.</p>
<pre><code>$ ghc-9.10 -O1 Test.hs
$ ./Test
some heavy computation 1
42
42
some heavy computation 2
42
42
some heavy computation 3
42
42
some heavy computation 4
42
42</code></pre>
<p>But what happen if optimizations are disabled?</p>
<pre><code>$ ghc-9.10 -O0 Test.hs
$ ./Test
some heavy computation 1
42
42
some heavy computation 2
42
42
some heavy computation 3
42
some heavy computation 3
42
some heavy computation 4
42
some heavy computation 4
42</code></pre>
<p><code>someValueAmb</code> and <code>someValueTagged</code> were evaluated only once each, whereas <code>someValueProxy</code> and <code>someValueVis</code> were evaluated twice each.
This reflects the difference whether these entities are the value <code>Int</code> or the function <code>_ -&gt; Int</code>.</p>
<p>In a simple program like this, there would be no difference if optimizations are enabled.
But in a more complex and intricate program, the optimizations may not work well enough.
If efficiency is the most important thing to you, you should keep this in mind.</p>
<h2 id="theorem-proving">Theorem proving</h2>
<p>Type-level programming is common in Haskell.
For example, the type-level list concatenation <code>++</code> can be defined as follows:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span><span class="ot"> (++) ::</span> [k] <span class="ot">-&gt;</span> [k] <span class="ot">-&gt;</span> [k]</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> (<span class="op">++</span>) xs ys</span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">instance</span> &#39;[] <span class="op">++</span> ys <span class="ot">=</span> ys</span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">instance</span> (x &#39;<span class="op">:</span> xs) <span class="op">++</span> ys <span class="ot">=</span> x &#39;<span class="op">:</span> (xs <span class="op">++</span> ys)</span></code></pre></div>
<p>The associativity law <code>xs ++ (ys ++ zs) = (xs ++ ys) ++ zs</code> holds on list concatenation, but GHC’s type checker doesn’t know that.
To teach the type checker an non-trivial equality, we use theorem proving.
That is, we define a function like this:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Type.Equality</span> ((:~:))</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a><span class="ot">appendIsAssociative ::</span> <span class="op">...</span> <span class="ot">-&gt;</span> xs <span class="op">++</span> (ys <span class="op">++</span> zs) <span class="op">:~:</span> (xs <span class="op">++</span> ys) <span class="op">++</span> zs</span></code></pre></div>
<p>To prove the associativity, we can use structural induction on <code>xs</code>.
That is, if <code>xs = '[]</code> then it is obvious.
If <code>xs = x : xss</code>, then we can prove the equation with:</p>
<pre><code>(x : xss) ++ (ys ++ zs)
  = x : (xss ++ (ys ++ zs))  (by definition of ++)
  = x : ((xss ++ ys) ++ zs)  (by induction hypothesis)
  = (x : (xss ++ ys)) ++ zs  (by definition of ++)
  = ((x : xss) ++ ys) ++ zs  (by definition of ++)</code></pre>
<p>Now, let’s implement it.
Since we want to prove by case on <code>xs</code>, we define a data type to enable pattern-matching:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">ProxyList</span> xs <span class="kw">where</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">PNil</span><span class="ot"> ::</span> <span class="dt">ProxyList</span> &#39;[]</span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">PCons</span><span class="ot"> ::</span> <span class="dt">Proxy</span> x <span class="ot">-&gt;</span> <span class="dt">ProxyList</span> xs <span class="ot">-&gt;</span> <span class="dt">ProxyList</span> (x &#39;<span class="op">:</span> xs)</span></code></pre></div>
<p>On the other hand, we don’t need to do case analysis on <code>ys</code> and <code>zs</code>, the parameter can be something like <code>Proxy</code>.
Therefore, our “proof” will be a function with the following signature:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="ot">appendIsAssociative ::</span> <span class="dt">ProxyList</span> xs <span class="ot">-&gt;</span> proxy2 ys <span class="ot">-&gt;</span> proxy3 zs <span class="ot">-&gt;</span> xs <span class="op">++</span> (ys <span class="op">++</span> zs) <span class="op">:~:</span> (xs <span class="op">++</span> ys) <span class="op">++</span> zs</span></code></pre></div>
<p>The body of the proof, written according to the equational transformation, is as follows:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a>appendIsAssociative <span class="dt">PNil</span> _ _ <span class="ot">=</span> <span class="dt">Refl</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a>appendIsAssociative (<span class="dt">PCons</span> (<span class="ot">_ ::</span> _ x) (<span class="ot">xss ::</span> _ xss)) (<span class="ot">ys ::</span> _ ys) (<span class="ot">zs ::</span> _ zs) <span class="ot">=</span> <span class="kw">let</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="ot">    pf1 ::</span> (x <span class="op">:</span> xss) <span class="op">++</span> (ys <span class="op">++</span> zs) <span class="op">:~:</span> x <span class="op">:</span> (xss <span class="op">++</span> (ys <span class="op">++</span> zs))</span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a>    pf1 <span class="ot">=</span> <span class="dt">Refl</span></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a><span class="ot">    pf2 ::</span> x <span class="op">:</span> (xss <span class="op">++</span> (ys <span class="op">++</span> zs)) <span class="op">:~:</span> x <span class="op">:</span> ((xss <span class="op">++</span> ys) <span class="op">++</span> zs)</span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a>    pf2 <span class="ot">=</span> apply <span class="dt">Refl</span> (appendIsAssociative xss ys zs)</span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a><span class="ot">    pf3 ::</span> x <span class="op">:</span> ((xss <span class="op">++</span> ys) <span class="op">++</span> zs) <span class="op">:~:</span> (x <span class="op">:</span> (xss <span class="op">++</span> ys)) <span class="op">++</span> zs</span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true" tabindex="-1"></a>    pf3 <span class="ot">=</span> <span class="dt">Refl</span></span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true" tabindex="-1"></a><span class="ot">    pf4 ::</span> (x <span class="op">:</span> (xss <span class="op">++</span> ys)) <span class="op">++</span> zs <span class="op">:~:</span> ((x <span class="op">:</span> xss) <span class="op">++</span> ys) <span class="op">++</span> zs</span>
<span id="cb22-10"><a href="#cb22-10" aria-hidden="true" tabindex="-1"></a>    pf4 <span class="ot">=</span> <span class="dt">Refl</span></span>
<span id="cb22-11"><a href="#cb22-11" aria-hidden="true" tabindex="-1"></a>  <span class="kw">in</span> pf1 <span class="ot">`trans`</span> pf2 <span class="ot">`trans`</span> pf3 <span class="ot">`trans`</span> pf4</span></code></pre></div>
<p>Now we have the proof, but the above is not very ideal.
We wrote the intermediate types twice each.
Is there any way to simplify the code while maintaining the readability of the proof?</p>
<p>Ideally, I would like to make the equation</p>
<pre><code>(x : xss) ++ (ys ++ zs)
  = x : (xss ++ (ys ++ zs))  (by definition of ++)
  = x : ((xss ++ ys) ++ zs)  (by induction hypothesis)
  = (x : (xss ++ ys)) ++ zs  (by definition of ++)
  = ((x : xss) ++ ys) ++ zs  (by definition of ++)</code></pre>
<p>a valid Haskell code.</p>
<p>Before GHC 9.10, we might have used singleton types for this kind of thing.
But now we have <code>RequiredTypeArguments</code>.
Let’s use <code>RequiredTypeArguments</code> to achieve this notation.</p>
<p>The basic idea is to define operators <code>===</code> and <code>by</code> to have the following expression the type <code>a :~: c</code>:</p>
<pre><code>〈proof of a = b〉 === c `by` 〈proof of b = c〉</code></pre>
<p>We use <code>forall -&gt;</code> in <code>===</code> to receive the type <code>c</code>.
That is, the operators <code>===</code> and <code>by</code> should have the types</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="ot">(===) ::</span> a <span class="op">:~:</span> b <span class="ot">-&gt;</span> <span class="kw">forall</span> c <span class="ot">-&gt;</span> <span class="op">???</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a><span class="ot">by ::</span> <span class="op">???</span> <span class="ot">-&gt;</span> b <span class="op">:~:</span> c <span class="ot">-&gt;</span> a <span class="op">:~:</span> c</span></code></pre></div>
<p>The <code>???</code> part must contain the information for <code>a</code>, <code>b</code>, <code>c</code>.
Here, I use <code>(a :~: b, Proxy c)</code>.</p>
<p>In summary, the proof can now be written as follows:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE GHC2021 #-}</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE DataKinds #-}</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE TypeFamilies #-}</span></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE RequiredTypeArguments #-}</span></span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE PartialTypeSignatures #-}</span></span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# OPTIONS_GHC -Wno-partial-type-signatures #-}</span></span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Type.Equality</span></span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Proxy</span></span>
<span id="cb26-9"><a href="#cb26-9" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Prelude</span> <span class="kw">hiding</span> ((++))</span>
<span id="cb26-10"><a href="#cb26-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-11"><a href="#cb26-11" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span><span class="ot"> (++) ::</span> [k] <span class="ot">-&gt;</span> [k] <span class="ot">-&gt;</span> [k]</span>
<span id="cb26-12"><a href="#cb26-12" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> (<span class="op">++</span>) xs ys</span>
<span id="cb26-13"><a href="#cb26-13" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">instance</span> &#39;[] <span class="op">++</span> ys <span class="ot">=</span> ys</span>
<span id="cb26-14"><a href="#cb26-14" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">instance</span> (x &#39;<span class="op">:</span> xs) <span class="op">++</span> ys <span class="ot">=</span> x &#39;<span class="op">:</span> (xs <span class="op">++</span> ys)</span>
<span id="cb26-15"><a href="#cb26-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-16"><a href="#cb26-16" aria-hidden="true" tabindex="-1"></a><span class="kw">infixl</span> <span class="dv">1</span> <span class="op">===</span>, <span class="ot">`by`</span></span>
<span id="cb26-17"><a href="#cb26-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-18"><a href="#cb26-18" aria-hidden="true" tabindex="-1"></a><span class="ot">(===) ::</span> a <span class="op">:~:</span> b <span class="ot">-&gt;</span> <span class="kw">forall</span> c <span class="ot">-&gt;</span> (a <span class="op">:~:</span> b, <span class="dt">Proxy</span> c)</span>
<span id="cb26-19"><a href="#cb26-19" aria-hidden="true" tabindex="-1"></a>(<span class="op">===</span>) x _ <span class="ot">=</span> (x, <span class="dt">Proxy</span>)</span>
<span id="cb26-20"><a href="#cb26-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-21"><a href="#cb26-21" aria-hidden="true" tabindex="-1"></a><span class="ot">by ::</span> (a <span class="op">:~:</span> b, <span class="dt">Proxy</span> c) <span class="ot">-&gt;</span> b <span class="op">:~:</span> c <span class="ot">-&gt;</span> a <span class="op">:~:</span> c</span>
<span id="cb26-22"><a href="#cb26-22" aria-hidden="true" tabindex="-1"></a>by (<span class="dt">Refl</span>, _) <span class="dt">Refl</span> <span class="ot">=</span> <span class="dt">Refl</span></span>
<span id="cb26-23"><a href="#cb26-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-24"><a href="#cb26-24" aria-hidden="true" tabindex="-1"></a><span class="ot">beginProof ::</span> <span class="kw">forall</span> a <span class="ot">-&gt;</span> a <span class="op">:~:</span> a</span>
<span id="cb26-25"><a href="#cb26-25" aria-hidden="true" tabindex="-1"></a>beginProof _ <span class="ot">=</span> <span class="dt">Refl</span></span>
<span id="cb26-26"><a href="#cb26-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-27"><a href="#cb26-27" aria-hidden="true" tabindex="-1"></a><span class="ot">appendIsAssociative ::</span> <span class="dt">ProxyList</span> xs <span class="ot">-&gt;</span> proxy2 ys <span class="ot">-&gt;</span> proxy3 zs <span class="ot">-&gt;</span> xs <span class="op">++</span> (ys <span class="op">++</span> zs) <span class="op">:~:</span> (xs <span class="op">++</span> ys) <span class="op">++</span> zs</span>
<span id="cb26-28"><a href="#cb26-28" aria-hidden="true" tabindex="-1"></a>appendIsAssociative <span class="dt">PNil</span> _ _ <span class="ot">=</span> <span class="dt">Refl</span></span>
<span id="cb26-29"><a href="#cb26-29" aria-hidden="true" tabindex="-1"></a>appendIsAssociative (<span class="dt">PCons</span> (<span class="ot">_ ::</span> _ x) (<span class="ot">xss_ ::</span> _ xss)) (<span class="ot">ys_ ::</span> _ ys) (<span class="ot">zs_ ::</span> _ zs)</span>
<span id="cb26-30"><a href="#cb26-30" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span> beginProof ((x <span class="op">:</span> xss) <span class="op">++</span> (ys <span class="op">++</span> zs))</span>
<span id="cb26-31"><a href="#cb26-31" aria-hidden="true" tabindex="-1"></a>           <span class="op">===</span> x <span class="op">:</span> (xss <span class="op">++</span> (ys <span class="op">++</span> zs)) <span class="ot">`by`</span> <span class="dt">Refl</span></span>
<span id="cb26-32"><a href="#cb26-32" aria-hidden="true" tabindex="-1"></a>           <span class="op">===</span> x <span class="op">:</span> ((xss <span class="op">++</span> ys) <span class="op">++</span> zs) <span class="ot">`by`</span> apply <span class="dt">Refl</span> (appendIsAssociative xss_ ys_ zs_)</span>
<span id="cb26-33"><a href="#cb26-33" aria-hidden="true" tabindex="-1"></a>           <span class="op">===</span> (x <span class="op">:</span> (xss <span class="op">++</span> ys)) <span class="op">++</span> zs <span class="ot">`by`</span> <span class="dt">Refl</span></span>
<span id="cb26-34"><a href="#cb26-34" aria-hidden="true" tabindex="-1"></a>           <span class="op">===</span> ((x <span class="op">:</span> xss) <span class="op">++</span> ys) <span class="op">++</span> zs <span class="ot">`by`</span> <span class="dt">Refl</span></span>
<span id="cb26-35"><a href="#cb26-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-36"><a href="#cb26-36" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">ProxyList</span> xs <span class="kw">where</span> <span class="op">...</span></span></code></pre></div>
<p>There are a couple of remarks:</p>
<ul>
<li>Using type-level <code>++</code> as an argument to <code>forall -&gt;</code> is ambiguous with term-level <code>++</code>. You could use <code>type</code>, but it would be too noisy, so here we hide the <code>++</code> from <code>Prelude</code>.</li>
<li>In the previous code, I used the same variable names at the term level and the type level, like <code>xss :: _ xss</code>, but this is also inconvenient, so I changed the variable names at the term level.</li>
</ul>
<p>Now the proof is cool enough, but can it be improved further?
For example, can we just use <code>appendIsAssociative ...</code> without using <code>apply Refl</code> when applying induction hypothesis?</p>
<p>Yes.
The implementation is as follows:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE GHC2021 #-}</span></span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE DataKinds #-}</span></span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE TypeFamilies #-}</span></span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE RequiredTypeArguments #-}</span></span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Type.Equality</span></span>
<span id="cb27-6"><a href="#cb27-6" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Proxy</span></span>
<span id="cb27-7"><a href="#cb27-7" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Prelude</span> <span class="kw">hiding</span> ((++))</span>
<span id="cb27-8"><a href="#cb27-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-9"><a href="#cb27-9" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span><span class="ot"> (++) ::</span> [k] <span class="ot">-&gt;</span> [k] <span class="ot">-&gt;</span> [k]</span>
<span id="cb27-10"><a href="#cb27-10" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> (<span class="op">++</span>) xs ys</span>
<span id="cb27-11"><a href="#cb27-11" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">instance</span> &#39;[] <span class="op">++</span> ys <span class="ot">=</span> ys</span>
<span id="cb27-12"><a href="#cb27-12" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">instance</span> (x &#39;<span class="op">:</span> xs) <span class="op">++</span> ys <span class="ot">=</span> x &#39;<span class="op">:</span> (xs <span class="op">++</span> ys)</span>
<span id="cb27-13"><a href="#cb27-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-14"><a href="#cb27-14" aria-hidden="true" tabindex="-1"></a><span class="kw">infixl</span> <span class="dv">1</span> <span class="op">===</span>, <span class="ot">`by`</span></span>
<span id="cb27-15"><a href="#cb27-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-16"><a href="#cb27-16" aria-hidden="true" tabindex="-1"></a><span class="ot">(===) ::</span> a <span class="op">:~:</span> b <span class="ot">-&gt;</span> <span class="kw">forall</span> c <span class="ot">-&gt;</span> b <span class="op">~</span> c <span class="ot">=&gt;</span> a <span class="op">:~:</span> c</span>
<span id="cb27-17"><a href="#cb27-17" aria-hidden="true" tabindex="-1"></a>(<span class="op">===</span>) <span class="dt">Refl</span> _ <span class="ot">=</span> <span class="dt">Refl</span></span>
<span id="cb27-18"><a href="#cb27-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-19"><a href="#cb27-19" aria-hidden="true" tabindex="-1"></a><span class="ot">by ::</span> (s <span class="op">~</span> t <span class="ot">=&gt;</span> prop) <span class="ot">-&gt;</span> s <span class="op">:~:</span> t <span class="ot">-&gt;</span> prop</span>
<span id="cb27-20"><a href="#cb27-20" aria-hidden="true" tabindex="-1"></a>by proof <span class="dt">Refl</span> <span class="ot">=</span> proof</span>
<span id="cb27-21"><a href="#cb27-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-22"><a href="#cb27-22" aria-hidden="true" tabindex="-1"></a><span class="ot">beginProof ::</span> <span class="kw">forall</span> a <span class="ot">-&gt;</span> a <span class="op">:~:</span> a</span>
<span id="cb27-23"><a href="#cb27-23" aria-hidden="true" tabindex="-1"></a>beginProof _ <span class="ot">=</span> <span class="dt">Refl</span></span>
<span id="cb27-24"><a href="#cb27-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-25"><a href="#cb27-25" aria-hidden="true" tabindex="-1"></a><span class="ot">appendIsAssociative ::</span> <span class="kw">forall</span> xs <span class="ot">-&gt;</span> <span class="dt">ProxyListI</span> xs <span class="ot">=&gt;</span> <span class="kw">forall</span> ys <span class="ot">-&gt;</span> <span class="kw">forall</span> zs <span class="ot">-&gt;</span> xs <span class="op">++</span> (ys <span class="op">++</span> zs) <span class="op">:~:</span> (xs <span class="op">++</span> ys) <span class="op">++</span> zs</span>
<span id="cb27-26"><a href="#cb27-26" aria-hidden="true" tabindex="-1"></a>appendIsAssociative xs ys zs <span class="ot">=</span> <span class="kw">case</span> proxyList&#39; <span class="op">@</span>xs <span class="kw">of</span></span>
<span id="cb27-27"><a href="#cb27-27" aria-hidden="true" tabindex="-1"></a>  <span class="dt">PNil&#39;</span> <span class="ot">-&gt;</span> <span class="dt">Refl</span></span>
<span id="cb27-28"><a href="#cb27-28" aria-hidden="true" tabindex="-1"></a>  <span class="dt">PCons&#39;</span> <span class="op">@</span>x <span class="op">@</span>xss <span class="ot">-&gt;</span></span>
<span id="cb27-29"><a href="#cb27-29" aria-hidden="true" tabindex="-1"></a>    beginProof ((x <span class="op">:</span> xss) <span class="op">++</span> (ys <span class="op">++</span> zs))</span>
<span id="cb27-30"><a href="#cb27-30" aria-hidden="true" tabindex="-1"></a>           <span class="op">===</span> x <span class="op">:</span> (xss <span class="op">++</span> (ys <span class="op">++</span> zs))</span>
<span id="cb27-31"><a href="#cb27-31" aria-hidden="true" tabindex="-1"></a>           <span class="op">===</span> x <span class="op">:</span> ((xss <span class="op">++</span> ys) <span class="op">++</span> zs) <span class="ot">`by`</span> appendIsAssociative xss ys zs</span>
<span id="cb27-32"><a href="#cb27-32" aria-hidden="true" tabindex="-1"></a>           <span class="op">===</span> (x <span class="op">:</span> (xss <span class="op">++</span> ys)) <span class="op">++</span> zs</span>
<span id="cb27-33"><a href="#cb27-33" aria-hidden="true" tabindex="-1"></a>           <span class="op">===</span> ((x <span class="op">:</span> xss) <span class="op">++</span> ys) <span class="op">++</span> zs</span>
<span id="cb27-34"><a href="#cb27-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-35"><a href="#cb27-35" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">ProxyList&#39;</span> xs <span class="kw">where</span></span>
<span id="cb27-36"><a href="#cb27-36" aria-hidden="true" tabindex="-1"></a>  <span class="dt">PNil&#39;</span><span class="ot"> ::</span> <span class="dt">ProxyList&#39;</span> &#39;[]</span>
<span id="cb27-37"><a href="#cb27-37" aria-hidden="true" tabindex="-1"></a>  <span class="dt">PCons&#39;</span><span class="ot"> ::</span> <span class="kw">forall</span> x xs<span class="op">.</span> <span class="dt">ProxyListI</span> xs <span class="ot">=&gt;</span> <span class="dt">ProxyList&#39;</span> (x &#39;<span class="op">:</span> xs)</span>
<span id="cb27-38"><a href="#cb27-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-39"><a href="#cb27-39" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">ProxyListI</span> xs <span class="kw">where</span></span>
<span id="cb27-40"><a href="#cb27-40" aria-hidden="true" tabindex="-1"></a><span class="ot">  proxyList&#39; ::</span> <span class="dt">ProxyList&#39;</span> xs</span>
<span id="cb27-41"><a href="#cb27-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-42"><a href="#cb27-42" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">ProxyListI</span> &#39;[] <span class="kw">where</span></span>
<span id="cb27-43"><a href="#cb27-43" aria-hidden="true" tabindex="-1"></a>  proxyList&#39; <span class="ot">=</span> <span class="dt">PNil&#39;</span></span>
<span id="cb27-44"><a href="#cb27-44" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-45"><a href="#cb27-45" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">ProxyListI</span> xs <span class="ot">=&gt;</span> <span class="dt">ProxyListI</span> (x &#39;<span class="op">:</span> xs) <span class="kw">where</span></span>
<span id="cb27-46"><a href="#cb27-46" aria-hidden="true" tabindex="-1"></a>  proxyList&#39; <span class="ot">=</span> <span class="dt">PCons&#39;</span> <span class="op">@</span>x <span class="op">@</span>xs</span></code></pre></div>
<h2 id="acknowledgements">Acknowledgements</h2>
<p>I must thank all the people who worked for GHC 9.10 release, especially Serokell’s GHC team for the work on dependent types.
Thank you!</p>]]></description>
    <pubDate>Sat, 11 May 2024 00:00:00 UT</pubDate>
    <guid>https://minoki.github.io/posts/2024-05-11-playing-with-visible-forall.html</guid>
    <dc:creator>Arata Mizuki</dc:creator>
</item>
<item>
    <title>Introducing LunarML: The Standard ML compiler that produces Lua/JavaScript</title>
    <link>https://minoki.github.io/posts/2023-12-17-lunarml-release.html</link>
    <description><![CDATA[<p>Today I would like to announce the initial release of LunarML, the new Standard ML compiler I have been developing for several years.</p>
<ul>
<li><a href="https://github.com/minoki/LunarML">minoki/LunarML: The Standard ML compiler that produces Lua/JavaScript</a></li>
</ul>
<h2 id="introduction">Introduction</h2>
<p>It is hard to create large software in an untyped language.
However, there are situations where the use of untyped languages is unavoidable due to the constraints of the runtime environment.
This situation can be remedied by a compiler, which converts programs written in statically-typed languages to code in untyped languages.
Such compilers are also called transpilers.</p>
<p>Since JavaScript used to be the only programming language that could be used on the Web, many compilers that compile to JavaScript have appeared.
However, there are still few compilers that output other scripting languages, such as Lua.
Therefore, I decided to create a new compiler that can convert from a statically-typed language to Lua.</p>
<p>As for the input language, I decided to use an existing language instead of creating a new one.
I like ML languages, so after considering several languages in the ML family, I chose Standard ML, which has the following features:</p>
<ul>
<li>Powerful type inference</li>
<li>Strict evaluation</li>
<li>The module system, which allows encapsulation and code reuse</li>
<li>The Definition and multiple conforming implementations</li>
</ul>
<h2 id="features-of-lunarml">Features of LunarML</h2>
<p>LunarML implements all the features of SML ’97 (including the module system) and some features of Successor ML.
It also implements some extensions.</p>
<p>The standard library is still incomplete, but it is functional enough to compile LunarML itself.</p>
<p>To support multi-file projects, LunarML implements ML Basis system (MLB files) compatible with MLton and MLKit.</p>
<p>Of course, a program can interact with the Lua and JavaScript worlds.</p>
<p>Some backends support delimited continuations, which allows integration with async runtimes like Node.js.</p>
<h2 id="build-and-install">Build and Install</h2>
<p>LunarML is developed on GitHub:
<a href="https://github.com/minoki/LunarML" class="uri">https://github.com/minoki/LunarML</a></p>
<p>You need MLton and Lua to build it.</p>
<pre><code>$ git clone https://github.com/minoki/LunarML.git
$ cd LunarML
$ make
$ bin/lunarml compile example/hello.sml
$ lua example/hello.lua
Hello world!</code></pre>
<p>To install LunarML in the system, use <code>make install</code>.
The destination directory can be configured by <code>PREFIX</code> variable (it defaults to <code>/usr/local</code>).</p>
<pre><code>$ make install prefix=/opt/lunarml
$ export PATH=/opt/lunarml/bin:$PATH
$ lunarml compile example/hello.sml</code></pre>
<p>You might not have MLton installed in the system.
In that case, you can follow the alternative method: The Docker image.</p>
<pre><code>$ docker pull ghcr.io/minoki/lunarml:latest
$ docker run --rm --platform linux/amd64 -v &quot;$(pwd)&quot;:/work -w /work ghcr.io/minoki/lunarml:latest lunarml compile example/hello.sml
$ lua example/hello.lua
Hello world!</code></pre>
<p>If you do not have Docker installed, there is yet another method: The precompiled script.
If you have Node.js installed, you can download the tarball and run <code>install-precompiled-node</code> target.</p>
<pre><code>$ curl -LO https://github.com/minoki/LunarML/releases/download/v0.1.0/lunarml-0.1.0.tar.gz
$ tar xf lunarml-0.1.0.tar.gz
$ cd lunarml-0.1.0
$ make install-precompiled-node PREFIX=/opt/lunarml
$ export PATH=/opt/lunarml/bin:$PATH
$ lunarml --help</code></pre>
<p>Warning: The script-compiled LunarML is very slow and you should use native binary for serious use.</p>
<h2 id="compiling-some-code">Compiling some code</h2>
<p>“Hello world” in Standard ML might look like:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode sml"><code class="sourceCode sml"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>print <span class="st">&quot;Hello world!</span><span class="ch">\n</span><span class="st">&quot;</span>;</span></code></pre></div>
<p>Let’s compile this.
You need Lua 5.3 or 5.4 to run the compiled code.</p>
<pre><code>$ lunarml compile hello.sml
$ lua hello.lua
Hello world!</code></pre>
<p>You can also get JavaScript code for Node.js.
Pass the <code>--nodejs</code> or <code>--nodejs-cps</code> option:</p>
<pre><code>$ lunarml compile --nodejs-cps hello.sml
$ node hello.mjs
Hello world!</code></pre>
<p>A (slow) program to compute Fibonacci numbers might look like:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode sml"><code class="sourceCode sml"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">fun</span> fib <span class="dv">0</span> = <span class="dv">0</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>  | fib <span class="dv">1</span> = <span class="dv">1</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  | fib n = fib (n - <span class="dv">1</span>) + fib (n - <span class="dv">2</span>);</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>print (<span class="st">&quot;fib 10 = &quot;</span> ^ Int.toString (fib <span class="dv">10</span>) ^ <span class="st">&quot;</span><span class="ch">\n</span><span class="st">&quot;</span>);</span></code></pre></div>
<pre><code>$ lunarml compile --lua fib10.sml
$ lua fib10.lua                      
fib 10 = 55
$ lunarml compile --nodejs fib10.sml
$ node fib10.mjs
fib 10 = 55</code></pre>
<p>You can use multiple-precision integers (called <code>IntInf</code> in Standard ML).
For Lua target, LunarML uses its own implementation.
For JavaScript target, LunarML uses <code>BigInt</code>.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode sml"><code class="sourceCode sml"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">fun</span> fact <span class="dv">0</span> : IntInf.<span class="dt">int</span> = <span class="dv">1</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>  | fact n = n * fact (n - <span class="dv">1</span>);</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>print (<span class="st">&quot;50! = &quot;</span> ^ IntInf.toString (fact <span class="dv">50</span>) ^ <span class="st">&quot;</span><span class="ch">\n</span><span class="st">&quot;</span>);</span></code></pre></div>
<pre><code>$ lunarml compile --lua fact50.sml
$ lua fact50.lua
50! = 30414093201713378043612608166064768844377641568960512000000000000
$ lunarml compile --nodejs fact50.sml
$ node fact50.mjs
50! = 30414093201713378043612608166064768844377641568960512000000000000</code></pre>
<h2 id="compiling-hamlet">Compiling HaMLet</h2>
<p><a href="https://people.mpi-sws.org/~rossberg/hamlet/">HaMLet</a> is another implementation of Standard ML, written in Standard ML.
Let’s compile HaMLet to Lua.</p>
<pre><code>$ git clone https://github.com/rossberg/hamlet.git
$ cd hamlet/
$ make hamlet.mlb SYSTEM=mlton
$ lunarml compile --lua-continuations hamlet.mlb
$ lua hamlet.lua
HaMLet 2.0.0 - To Be Or Not To Be Standard ML
[loading standard basis library]
- 1 + 1;
val it = 2 : int
- OS.Process.exit OS.Process.success : unit;</code></pre>
<p>Of course, you can also compile it to JavaScript.</p>
<pre><code>$ lunarml compile --nodejs-cps hamlet.mlb
$ node hamlet.mjs
HaMLet 2.0.0 - To Be Or Not To Be Standard ML
[loading standard basis library]
- &quot;Hello &quot; ^ &quot;world!&quot;; 
val it = &quot;Hello world!&quot; : string
- OS.Process.exit OS.Process.success : unit;</code></pre>
<h2 id="generating-lua-code">Generating Lua code</h2>
<p>By default, LunarML produces code for Lua 5.3/5.4.
You can be explicit with the <code>--lua</code> option.</p>
<p>To produce code for LuaJIT, you need to set the <code>--luajit</code> option.</p>
<p>The functionality of Lua can be called via <code>Lua</code> API.
Currently it is not very easy to use, so I may introduce a more convenient way in the future.</p>
<ul>
<li><a href="https://github.com/minoki/LunarML/blob/master/doc/LuaInterface.md">LunarML/doc/LuaInterface.md at master · minoki/LunarML</a></li>
</ul>
<p>You can also generate a Lua module with the <code>--lib</code> option.
Define a variable or module named <code>export</code>, and its content will become accessible from Lua.</p>
<p>A module defined like this</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode sml"><code class="sourceCode sml"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">structure</span> export = <span class="kw">struct</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> hello = <span class="st">&quot;Hello world!&quot;</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> print = TextIO.print</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">fun</span> add (x, y) = x + y</span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> fun&#39; = <span class="st">&quot;fun!&quot;</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a><span class="kw">end</span>;</span></code></pre></div>
<p>will compile to something like this:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode lua"><code class="sourceCode lua"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="cf">return</span> <span class="op">{</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>  <span class="va">hello</span> <span class="op">=</span> <span class="st">&quot;Hello world!&quot;</span><span class="op">,</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>  <span class="fu">print</span> <span class="op">=</span> <span class="op">...,</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">add</span> <span class="op">=</span> <span class="op">...,</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">fun</span> <span class="op">=</span> <span class="st">&quot;fun!&quot;</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The generated code is not very human readable.
Producing human-readable code is not one of my goals, but I would still like to generate code that is more readable.</p>
<h2 id="generating-javascript-code">Generating JavaScript code</h2>
<p>LunarML can also output JavaScript code.
Currently it requires Node.js for execution and does not work in a browser.
Use the <code>--nodejs</code> or <code>--nodejs-cps</code> option.</p>
<p>Many APIs of Node.js are asynchronous, whereas Standard ML’s input/output functions are synchronous.
To cope with this difference, LunarML performs what is called the CPS conversion on the program when the <code>--nodejs-cps</code> option is used.
If the <code>--nodejs</code> option is specified, it does not perform CPS conversion, but instead restricts the input/output functions.</p>
<p>The functionality of JavaScript can be called via <code>JavaScript</code> API.
I may introduce a more convenient way in the future.</p>
<ul>
<li><a href="https://github.com/minoki/LunarML/blob/master/doc/JavaScriptInterface.md">LunarML/doc/JavaScriptInterface.md at master · minoki/LunarML</a></li>
</ul>
<p>You can generate an ES module via the <code>--lib</code> option.
Define a variable or module named <code>export</code>, and it will be exported.</p>
<p>A module defined like this</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode sml"><code class="sourceCode sml"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">structure</span> export = <span class="kw">struct</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> foo = <span class="dv">42</span> : <span class="dt">int</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> bar = <span class="st">&quot;Hello world!&quot;</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> baz = <span class="st">&quot;Goodbye world!&quot;</span> : WideString.<span class="dt">string</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a><span class="kw">end</span>;</span></code></pre></div>
<p>will compile to something like this:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> foo <span class="op">=</span> <span class="dv">42</span><span class="op">;</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> bar <span class="op">=</span> <span class="bu">Uint8Array</span><span class="op">.</span><span class="fu">of</span>(<span class="op">...</span>)<span class="op">;</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> baz <span class="op">=</span> <span class="st">&quot;Goodbye world!&quot;</span><span class="op">;</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a><span class="im">export</span> { foo<span class="op">,</span> bar<span class="op">,</span> baz }<span class="op">;</span></span></code></pre></div>
<p>SML’s standard string type <code>string</code> is represented by <code>Uint8Array</code> in JavaScript.
You can use <code>WideString.string</code> type to manipulate JavaScript’s 16-bit string.</p>
<h2 id="future-plans">Future plans</h2>
<p>LunarML is still a work in progress and there are many features that I would like to implement in the future.
Some of them are listed below:</p>
<ul>
<li>More complete standard library</li>
<li>More features of Successor ML</li>
<li>REPL and interpreter</li>
<li>Online compiler</li>
<li>More backends
<ul>
<li>JavaScript for browsers</li>
<li>PHP</li>
<li>WebAssembly with GC</li>
</ul></li>
<li>Package manager</li>
</ul>
<p>Lastly, I would be happy to receive a star on the GitHub repository:</p>
<ul>
<li><a href="https://github.com/minoki/LunarML">minoki/LunarML: The Standard ML compiler that produces Lua/JavaScript</a></li>
</ul>
<p>Thank you for reading!</p>]]></description>
    <pubDate>Sun, 17 Dec 2023 00:00:00 UT</pubDate>
    <guid>https://minoki.github.io/posts/2023-12-17-lunarml-release.html</guid>
    <dc:creator>Arata Mizuki</dc:creator>
</item>

    </channel>
</rss>
